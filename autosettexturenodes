import bpy
import os

def add_and_connect_texture_nodes(material, texture_folder, texture_base_name):
    # Check if the material has a node tree
    if material.node_tree:
        # Create nodes for different texture types
        base_color_1_node = material.node_tree.nodes.new(type='ShaderNodeTexImage')
        base_color_2_node = material.node_tree.nodes.new(type='ShaderNodeTexImage')
        roughness_node = material.node_tree.nodes.new(type='ShaderNodeTexImage')
        normal_map_node = material.node_tree.nodes.new(type='ShaderNodeTexImage')

        # Set file paths for texture nodes (use .jpg instead of .png)
        base_color_1_path = os.path.join(texture_folder, f"{texture_base_name}_r.jpg")
        base_color_2_path = os.path.join(texture_folder, f"{texture_base_name}_c.jpg")
        roughness_path = os.path.join(texture_folder, f"{texture_base_name}_g.jpg")
        normal_map_path = os.path.join(texture_folder, f"{texture_base_name}_n.jpg")

        base_color_1_node.image = bpy.data.images.load(base_color_1_path, check_existing=True)
        base_color_2_node.image = bpy.data.images.load(base_color_2_path, check_existing=True)
        roughness_node.image = bpy.data.images.load(roughness_path, check_existing=True)
        normal_map_node.image = bpy.data.images.load(normal_map_path, check_existing=True)

        # Set color space to Non-Color for normal and roughness nodes
        for node in [normal_map_node, roughness_node]:
            node.image.colorspace_settings.name = 'Non-Color'

        # Create and connect nodes for combining base colors
        mix_color_node = material.node_tree.nodes.new(type='ShaderNodeMixRGB')
        material.node_tree.links.new(base_color_1_node.outputs["Color"], mix_color_node.inputs[1])
        material.node_tree.links.new(base_color_2_node.outputs["Color"], mix_color_node.inputs[2])

        # Add a ShaderNodeInvert node for the "_g" texture node
        invert_node = material.node_tree.nodes.new(type='ShaderNodeInvert')
        material.node_tree.links.new(roughness_node.outputs["Color"], invert_node.inputs["Color"])

        # Add a ShaderNodeNormalMap node for the normal map
        normal_map_shader_node = material.node_tree.nodes.new(type='ShaderNodeNormalMap')
        material.node_tree.links.new(normal_map_node.outputs["Color"], normal_map_shader_node.inputs["Color"])

        # Connect nodes to Principled BSDF shader
        principled_bsdf = material.node_tree.nodes.get("Principled BSDF")
        if principled_bsdf:
            material.node_tree.links.new(mix_color_node.outputs["Color"], principled_bsdf.inputs["Base Color"])
            material.node_tree.links.new(invert_node.outputs["Color"], principled_bsdf.inputs["Roughness"])
            material.node_tree.links.new(normal_map_shader_node.outputs["Normal"], principled_bsdf.inputs["Normal"])

def main():
    # Specify the folder and base name for the textures
    texture_folder = "/path/to/textures/"
    texture_base_name = "mat4"

    # Get the selected object
    selected_object = bpy.context.active_object

    # Check if the selected object has a material
    if selected_object and selected_object.material_slots:
        # Iterate through material slots of the selected object
        for material_slot in selected_object.material_slots:
            # Call the function to add and connect texture nodes for each material
            add_and_connect_texture_nodes(material_slot.material, texture_folder, texture_base_name)

if __name__ == "__main__":
    main()
